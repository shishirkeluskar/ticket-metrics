syntax = "proto3";

package ticketmetrics;

option java_multiple_files = true;
option java_package = "com.shishir.ticketmetrics.generated.grpc";
option java_outer_classname = "TicketMetricsProto";

import "google/protobuf/timestamp.proto";

// -------- 1. Ticket Score --------

message GetTicketScoreRequest {
  int32 ticket_id = 1;
}

message GetTicketScoreResponse {
  double score = 1;
}

// -------- 2. Category Timeline --------

message CategoryTimelineRequest {
  string start_date = 1; // ISO 8601 string
  string end_date = 2;
}

message CategoryTimelineResponse {
  repeated CategoryAggregateScore scores = 1;
}

message CategoryAggregateScore {
  int32 category_id = 1;
  int32 total_ratings = 2;
  double average_score = 3; // Overall average for the period
  repeated CategoryScoreTimelineEntry timeline = 4;
}

message CategoryScoreTimelineEntry {
  string timestamp = 1; // ISO 8601 UTC format
  double score = 2;
}


// -------- 3. Ticket/Category Matrix --------

message TicketCategoryMatrixRequest {
  string start_date = 1; // ISO 8601 UTC format
  string end_date = 2;
}

message TicketCategoryMatrixResponse {
  repeated TicketCategoryScoreRow ticket_scores = 1;
}

message TicketCategoryScoreRow {
  int32 ticket_id = 1;
  map<int32, double> category_scores = 2; // key = categoryId, value = % score
}

// -------- 4. Overall Score --------

message OverallQualityScoreRequest {
  string start_date = 1; // ISO-8601 datetime string
  string end_date = 2;
}

message OverallQualityScoreResponse {
  double score = 1;
}

// -------- 5. Period Comparison --------

message PeriodScoreComparisonRequest {
  string current_start = 1; // ISO-8601 datetime string
  string current_end = 2;
}

message PeriodScoreComparisonResponse {
  double current_period_score = 1;
  double previous_period_score = 2;
  double score_change = 3; // current - previous in percentage points
}


// -------- gRPC Service --------

service TicketMetricsService {
  rpc GetTicketScore(GetTicketScoreRequest) returns (GetTicketScoreResponse);
  rpc GetCategoryTimelineScores (CategoryTimelineRequest) returns (CategoryTimelineResponse);
  rpc GetTicketCategoryMatrix (TicketCategoryMatrixRequest) returns (TicketCategoryMatrixResponse);
  rpc GetOverallQualityScore(OverallQualityScoreRequest) returns (OverallQualityScoreResponse);
  rpc ComparePeriodScores(PeriodScoreComparisonRequest) returns (PeriodScoreComparisonResponse);
}