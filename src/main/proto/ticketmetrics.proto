syntax = "proto3";

package ticketmetrics;

option java_multiple_files = true;
option java_package = "com.shishir.ticketmetrics.generated.grpc";
option java_outer_classname = "TicketMetricsProto";

import "google/protobuf/timestamp.proto";

// -------- 1. Ticket Score --------

message GetTicketScoreRequest {
  int32 ticket_id = 1;
}

message GetTicketScoreResponse {
  double score = 1;
}

// -------- 2. Category Timeline --------

message CategoryTimelineRequest {
  string startDate = 1; // ISO 8601 string
  string endDate = 2;
}

message CategoryTimelineResponse {
  repeated CategoryScore scores = 1;
}

message CategoryScore {
  int32 category_id = 1;
  int32 total_ratings = 2;
  double average_score = 3; // Overall average for the period
  repeated ScoreByDate timeline = 4;
}

message ScoreByDate {
  //  google.protobuf.Timestamp date = 1;
  string date = 1; // ISO 8601 UTC format
  double score = 2;
}


// -------- 3. Ticket/Category Scores Over Time --------
message TicketScoreRequest {
  string start = 1;
  string end = 2;
}

message TicketScoreResponse {
  repeated TicketScoreRow ticket_scores = 1;
}

message TicketScoreRow {
  int32 ticket_id = 1;
  map<int32, double> category_scores = 2; // key = categoryId, value = % score
}

// -------- 4. Request for overall quality score in a period --------

message OverallScoreRequest {
  string start = 1; // ISO-8601 datetime string
  string end = 2;
}

// Response with overall score percentage
message OverallScoreResponse {
  double overall_score = 1;
}

// -------- 5. Request for period-over-period score change --------
message PeriodOverPeriodRequest {
  string current_start = 1; // ISO-8601 datetime string
  string current_end = 2;
}

// Response containing scores for current and previous periods and their difference
message PeriodOverPeriodResponse {
  double current_period_score = 1;
  double previous_period_score = 2;
  double score_change = 3; // current - previous in percentage points
}


// -------- gRPC Service --------

service TicketMetricsService {
  rpc GetTicketScore(GetTicketScoreRequest) returns (GetTicketScoreResponse);
  rpc GetCategoryTimelineScores (CategoryTimelineRequest) returns (CategoryTimelineResponse);
  rpc GetTicketCategoryMatrix (TicketScoreRequest) returns (TicketScoreResponse);
  rpc GetOverallQualityScore(OverallScoreRequest) returns (OverallScoreResponse);
  rpc ComparePeriodScores(PeriodOverPeriodRequest) returns (PeriodOverPeriodResponse);
}